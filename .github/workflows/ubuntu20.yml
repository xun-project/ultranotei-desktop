name: Ubuntu 20.04

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build-ubuntu20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y build-essential git cmake automake libboost-all-dev libqrencode-dev qt5-default qttools5-dev qttools5-dev-tools qtdeclarative5-dev qtquickcontrols2-5-dev qtmultimedia5-dev qtwebengine5-dev libqt5webenginewidgets5 libssl-dev libevent-dev qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-dialogs qml-module-qtquick-shapes qml-module-qt-labs-qmlmodels qml-module-qt-labs-platform qml-module-qtwebengine
      - name: Clone ultranote-core and update submoudles
        run: |
          rm -rf cryptonote
          git clone https://github.com/xun-project/ultranotei-core.git cryptonote
          git submodule init
          git submodule update
      - name: Build
        id: build
        run: |
          xuni_ver="1.0.8"
          release_name=xuni-cli-desktop-ubuntu-2004-v"$xuni_ver"
          mkdir -p build/release
          chmod a+x tor_build.sh
          ./tor_build.sh
          cd build/release
          cmake -DCMAKE_BUILD_TYPE=Release ../..
          cd ../..
          make -j4
          make package-deb
          mkdir $release_name
          mv build/release/*.deb $release_name
          tar -czf "$release_name".tar.gz "$release_name"
          sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}')
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "xuni_ver=${xuni_ver}" >> $GITHUB_OUTPUT
      - name: Create Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: ${{ steps.build.outputs.release_name }}
          name: UltraNote Desktop v${{ steps.build.outputs.xuni_ver }}
          body: |
            [Download for Ubuntu 20.04](../../releases/download/${{ steps.build.outputs.ccx_version }}/${{ steps.build.outputs.release_name }}) **${{ steps.build.outputs.release_name }}**
            `SHA256 : ${{ steps.build.outputs.sha256 }}`
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
